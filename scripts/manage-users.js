#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// Fun√ß√£o para ler o arquivo de configura√ß√£o
function readUserConfig() {
  const configPath = path.join(__dirname, '../config/users.ts');
  const content = fs.readFileSync(configPath, 'utf8');
  return content;
}

// Fun√ß√£o para extrair usu√°rios do arquivo de configura√ß√£o
function extractUsersFromConfig(content) {
  const usersMatch = content.match(/export const SYSTEM_USERS: UserConfig\[\] = \[([\s\S]*?)\];/);
  if (!usersMatch) {
    throw new Error('N√£o foi poss√≠vel encontrar SYSTEM_USERS no arquivo de configura√ß√£o');
  }

  const usersSection = usersMatch[1];
  const userMatches = usersSection.match(/\{[^}]+\}/g);
  
  if (!userMatches) {
    return [];
  }

  return userMatches.map(userStr => {
    const emailMatch = userStr.match(/email:\s*['"`]([^'"`]+)['"`]/);
    const nameMatch = userStr.match(/name:\s*['"`]([^'"`]+)['"`]/);
    const roleMatch = userStr.match(/role:\s*['"`]([^'"`]+)['"`]/);
    const matriculaMatch = userStr.match(/matricula:\s*['"`]([^'"`]+)['"`]/);

    return {
      email: emailMatch ? emailMatch[1] : '',
      name: nameMatch ? nameMatch[1] : '',
      role: roleMatch ? roleMatch[1] : '',
      matricula: matriculaMatch ? matriculaMatch[1] : '',
    };
  }).filter(user => user.email && user.name && user.role); // Filtrar apenas usu√°rios v√°lidos
}

// Fun√ß√£o para adicionar usu√°rio √† configura√ß√£o
function addUserToConfig(email, name, role, password, matricula = '') {
  const configPath = path.join(__dirname, '../config/users.ts');
  let content = fs.readFileSync(configPath, 'utf8');

  // Verificar se o usu√°rio j√° existe
  if (content.includes(`email: '${email}'`) || content.includes(`email: "${email}"`)) {
    throw new Error(`Usu√°rio com email ${email} j√° existe na configura√ß√£o`);
  }

  // Criar novo usu√°rio
  const newUser = `  {
    email: '${email}',
    name: '${name}',
    password: '${password}',
    role: '${role.toUpperCase()}',
    matricula: '${matricula}',
    isActive: true,
  },`;

  // Encontrar a posi√ß√£o para inserir (antes do fechamento do array)
  const insertIndex = content.lastIndexOf('];');
  if (insertIndex === -1) {
    throw new Error('N√£o foi poss√≠vel encontrar o final do array SYSTEM_USERS');
  }

  // Inserir o novo usu√°rio
  const newContent = content.slice(0, insertIndex) + newUser + '\n' + content.slice(insertIndex);
  
  // Escrever de volta no arquivo
  fs.writeFileSync(configPath, newContent, 'utf8');
  
  console.log(`‚úÖ Usu√°rio ${name} (${email}) adicionado √† configura√ß√£o`);
}

// Fun√ß√£o para remover usu√°rio da configura√ß√£o
function removeUserFromConfig(email) {
  const configPath = path.join(__dirname, '../config/users.ts');
  let content = fs.readFileSync(configPath, 'utf8');

  // Encontrar o bloco do usu√°rio
  const userPattern = new RegExp(`\\s*{[^}]*email:\\s*['"\`]${email.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}['"\`][^}]*},?\\s*`, 'g');
  
  if (!userPattern.test(content)) {
    throw new Error(`Usu√°rio com email ${email} n√£o encontrado na configura√ß√£o`);
  }

  // Remover o usu√°rio
  const newContent = content.replace(userPattern, '');
  
  // Escrever de volta no arquivo
  fs.writeFileSync(configPath, newContent, 'utf8');
  
  console.log(`‚úÖ Usu√°rio ${email} removido da configura√ß√£o`);
}

// Fun√ß√£o para listar usu√°rios
function listUsers() {
  const content = readUserConfig();
  const users = extractUsersFromConfig(content);
  
  console.log('üìã Usu√°rios configurados:');
  console.log('');
  
  if (users.length === 0) {
    console.log('Nenhum usu√°rio configurado.');
    return;
  }
  
  users.forEach((user, index) => {
    console.log(`${index + 1}. ${user.name}`);
    console.log(`   Email: ${user.email}`);
    console.log(`   Role: ${user.role}`);
    console.log(`   Matr√≠cula: ${user.matricula || 'N/A'}`);
    console.log('');
  });
}

// Fun√ß√£o para mostrar ajuda
function showHelp() {
  console.log('üìã Uso: node scripts/manage-users.js [comando] [op√ß√µes]');
  console.log('');
  console.log('Comandos dispon√≠veis:');
  console.log('  list                    - Listar todos os usu√°rios configurados');
  console.log('  add <email> <name> <role> <password> [matricula]');
  console.log('                           - Adicionar novo usu√°rio');
  console.log('  remove <email>          - Remover usu√°rio por email');
  console.log('  help                     - Mostrar esta ajuda');
  console.log('');
  console.log('Exemplos:');
  console.log('  node scripts/manage-users.js list');
  console.log('  node scripts/manage-users.js add "joao@ufsm.br" "Jo√£o Silva" "USER" "senha123" "123456"');
  console.log('  node scripts/manage-users.js remove "joao@ufsm.br"');
  console.log('');
  console.log('Roles dispon√≠veis: ADMIN, MANAGER, AGENT, USER');
}

// Processar argumentos
const command = process.argv[2];

switch (command) {
  case 'list':
    listUsers();
    break;
    
  case 'add':
    const [, , , email, name, role, password, matricula] = process.argv;
    if (!email || !name || !role || !password) {
      console.error('‚ùå Par√¢metros insuficientes para adicionar usu√°rio');
      console.log('Uso: node scripts/manage-users.js add <email> <name> <role> <password> [matricula]');
      process.exit(1);
    }
    try {
      addUserToConfig(email, name, role, password, matricula);
    } catch (error) {
      console.error('‚ùå Erro:', error.message);
      process.exit(1);
    }
    break;
    
  case 'remove':
    const emailToRemove = process.argv[3];
    if (!emailToRemove) {
      console.error('‚ùå Email n√£o fornecido');
      console.log('Uso: node scripts/manage-users.js remove <email>');
      process.exit(1);
    }
    try {
      removeUserFromConfig(emailToRemove);
    } catch (error) {
      console.error('‚ùå Erro:', error.message);
      process.exit(1);
    }
    break;
    
  case 'help':
  default:
    showHelp();
    break;
} 