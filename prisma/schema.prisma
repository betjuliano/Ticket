// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Usar PostgreSQL em produção
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// MODELOS DE USUÁRIOS E AUTENTICAÇÃO
// ========================================

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  name             String
  password         String
  role             UserRole  @default(USER)
  avatar           String?
  isActive         Boolean   @default(true)
  matricula        String?   @unique
  telefone         String?   @unique
  resetToken       String?   @unique
  resetTokenExpiry DateTime?
  lastLoginAt      DateTime?
  preferences      Json?     // Preferências do usuário (tema, notificações, etc)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relacionamentos
  createdTickets     Ticket[]           @relation("CreatedBy")
  assignedTickets    Ticket[]           @relation("AssignedTo")
  ticketComments     Comment[]
  ticketAttachments  Attachment[]
  userSessions       Session[]
  userLogs           UserLog[]
  notifications      Notification[]
  knowledgeArticles  KnowledgeArticle[] @relation("ArticleAuthor")
  articleRatings     ArticleRating[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  expiresAt    DateTime
  ipAddress    String?
  userAgent    String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())

  // Relacionamentos
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// ========================================
// MODELOS DE TICKETS
// ========================================

model Ticket {
  id          String       @id @default(cuid())
  title       String
  description String
  status      TicketStatus @default(OPEN)
  priority    Priority     @default(MEDIUM)
  category    String
  tags        String[]     // Array de tags
  estimatedHours Float?     // Estimativa de horas
  actualHours    Float?     // Horas reais gastas
  dueDate        DateTime?  // Data limite
  
  // Relacionamentos
  createdById String
  createdBy   User         @relation("CreatedBy", fields: [createdById], references: [id])
  
  assignedToId String?
  assignedTo   User?       @relation("AssignedTo", fields: [assignedToId], references: [id])
  
  // Timestamps
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  closedAt    DateTime?
  
  // Relacionamentos
  comments    Comment[]
  attachments Attachment[]
  ticketLogs  TicketLog[]

  @@map("tickets")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  isInternal Boolean @default(false) // Comentário interno (não visível para usuários)
  ticketId  String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id])

  @@map("comments")
}

model Attachment {
  id        String   @id @default(cuid())
  filename  String
  originalName String
  filepath  String
  filesize  Int
  mimetype  String
  isImage   Boolean  @default(false)
  ticketId  String
  userId    String
  createdAt DateTime @default(now())

  // Relacionamentos
  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id])

  @@map("attachments")
}

// ========================================
// MODELOS DE CONHECIMENTO (KNOWLEDGE BASE)
// ========================================

model KnowledgeCategory {
  id          String             @id @default(cuid())
  name        String             @unique
  description String?
  icon        String?
  color       String?
  order       Int                @default(0)
  isActive    Boolean            @default(true)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // Relacionamentos
  articles    KnowledgeArticle[]

  @@map("knowledge_categories")
}

model KnowledgeArticle {
  id          String   @id @default(cuid())
  title       String
  content     String   // Conteúdo em HTML/Markdown
  excerpt     String?  // Resumo do artigo
  slug        String   @unique
  tags        String[] // Array de tags
  isPublished Boolean  @default(false)
  isFeatured  Boolean  @default(false)
  views       Int      @default(0)
  
  // Relacionamentos
  categoryId  String
  category    KnowledgeCategory @relation(fields: [categoryId], references: [id])
  
  authorId    String
  author      User              @relation("ArticleAuthor", fields: [authorId], references: [id])
  
  // Timestamps
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  publishedAt DateTime?

  // Relacionamentos
  ratings     ArticleRating[]

  @@map("knowledge_articles")
}

model ArticleRating {
  id        String   @id @default(cuid())
  rating    Int      // 1-5 estrelas
  comment   String?
  articleId String
  userId    String
  createdAt DateTime @default(now())

  // Relacionamentos
  article KnowledgeArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user    User             @relation(fields: [userId], references: [id])

  @@unique([articleId, userId]) // Um usuário só pode avaliar um artigo uma vez
  @@map("article_ratings")
}

// ========================================
// MODELOS DE NOTIFICAÇÕES
// ========================================

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  userId    String
  relatedId String?          // ID do ticket, comentário, etc.
  data      Json?            // Dados adicionais em JSON
  read      Boolean          @default(false)
  readAt    DateTime?
  createdAt DateTime         @default(now())

  // Relacionamentos
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// ========================================
// MODELOS DE LOGS E AUDITORIA
// ========================================

model UserLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  details   String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relacionamentos
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_logs")
}

model TicketLog {
  id        String   @id @default(cuid())
  ticketId  String
  action    String
  details   String?
  oldValue  String?
  newValue  String?
  userId    String?
  createdAt DateTime @default(now())

  // Relacionamentos
  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("ticket_logs")
}

// ========================================
// MODELOS DE RELATÓRIOS E ANALYTICS
// ========================================

model TicketMetrics {
  id                String   @id @default(cuid())
  date              DateTime @unique @db.Date
  totalTickets      Int      @default(0)
  openTickets       Int      @default(0)
  inProgressTickets Int      @default(0)
  resolvedTickets   Int      @default(0)
  closedTickets     Int      @default(0)
  avgResolutionTime Float?   // Em horas
  avgResponseTime   Float?   // Em horas
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("ticket_metrics")
}

// ========================================
// ENUMS
// ========================================

enum UserRole {
  ADMIN
  COORDINATOR
  USER
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_FOR_USER
  WAITING_FOR_THIRD_PARTY
  RESOLVED
  CLOSED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationType {
  TICKET_CREATED
  TICKET_UPDATED
  TICKET_ASSIGNED
  TICKET_COMMENTED
  TICKET_RESOLVED
  TICKET_CLOSED
  SYSTEM_ANNOUNCEMENT
  KNOWLEDGE_ARTICLE_PUBLISHED
}