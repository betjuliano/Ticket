const API_BASE = 'http://localhost:3000/api'

// Fun√ß√£o para fazer requisi√ß√µes
async function makeRequest(method, endpoint, data = null, token = null) {
  const options = {
    method,
    headers: {
      'Content-Type': 'application/json',
      ...(token && { 'Authorization': `Bearer ${token}` })
    }
  }
  
  if (data && method !== 'GET') {
    options.body = JSON.stringify(data)
  }
  
  const response = await fetch(`${API_BASE}${endpoint}`, options)
  return response.json()
}

// Testes das APIs
async function testAPIs() {
  console.log('üß™ Testando todas as APIs...')
  
  try {
    // 1. Testar Health Check
    console.log('\n1. Health Check:')
    const health = await makeRequest('GET', '/health')
    console.log(health)
    
    // 2. Testar Tickets
    console.log('\n2. Tickets API:')
    const tickets = await makeRequest('GET', '/tickets')
    console.log('GET /tickets:', tickets)
    
    // 3. Testar Users
    console.log('\n3. Users API:')
    const users = await makeRequest('GET', '/users')
    console.log('GET /users:', users)
    
    // 4. Testar Knowledge
    console.log('\n4. Knowledge API:')
    const knowledge = await makeRequest('GET', '/knowledge')
    console.log('GET /knowledge:', knowledge)
    
    // 5. Testar Comments
    console.log('\n5. Comments API:')
    const comments = await makeRequest('GET', '/comments?ticketId=test')
    console.log('GET /comments:', comments)
    
    // 6. Testar Attachments
    console.log('\n6. Attachments API:')
    const attachments = await makeRequest('GET', '/attachments')
    console.log('GET /attachments:', attachments)
    
    // 7. Testar Dashboard Stats
    console.log('\n7. Dashboard Stats:')
    const stats = await makeRequest('GET', '/dashboard/stats')
    console.log('GET /dashboard/stats:', stats)
    
  } catch (error) {
    console.error('‚ùå Erro nos testes:', error)
  }
}

// Executar testes
testAPIs()


## ‚úÖ Excelente! Servidor Funcionando - An√°lise dos Resultados dos Testes

√ìtimo! O servidor est√° rodando e conseguimos testar todas as APIs. Vou analisar os resultados:

### üìä Resultados dos Testes das APIs

| API | Status | Observa√ß√µes |
|-----|--------|-------------|
| ‚úÖ **Health Check** | Funcionando | Servidor saud√°vel, uptime 122s |
| ‚úÖ **Dashboard Stats** | Funcionando | Dados mockados retornando corretamente |
| ‚ö†Ô∏è **Tickets** | Erro de valida√ß√£o | Par√¢metros de query inv√°lidos |
| ‚ùå **Users** | Acesso negado | Requer autentica√ß√£o |
| ‚ùå **Knowledge** | Erro de BD | PostgreSQL n√£o conectado |
| ‚ùå **Comments** | N√£o autenticado | Requer sess√£o |
| ‚ùå **Attachments** | N√£o autenticado | Requer sess√£o |

### üîß Problemas Identificados e Solu√ß√µes

#### 1. **Tickets API - Erro de Valida√ß√£o**
```javascript
// Corrigir a chamada da API de tickets
const tickets = await makeRequest('GET', '/tickets?page=1&limit=10')
```