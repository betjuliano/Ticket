version: '3.8'

services:
  # Traefik - Reverse Proxy
  traefik:
    image: traefik:v2.10
    command:
      - '--api.insecure=true'
      - '--providers.docker=true'
      - '--providers.docker.exposedbydefault=false'
      - '--entrypoints.web.address=:80'
      - '--entrypoints.websecure.address=:443'
      - '--certificatesresolvers.letsencrypt.acme.email=seu-email@exemplo.com'
      - '--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json'
      - '--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web'
    ports:
      - '80:80'
      - '443:443'
      - '8080:8080' # Dashboard Traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-certificates:/letsencrypt
    networks:
      - traefik-public
    restart: unless-stopped
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.traefik.rule=Host(`traefik.seu-dominio.com`)'
      - 'traefik.http.routers.traefik.entrypoints=websecure'
      - 'traefik.http.routers.traefik.tls.certresolver=letsencrypt'
      - 'traefik.http.services.traefik.loadbalancer.server.port=8080'

  # Portainer - Gerenciamento de Containers
  portainer:
    image: portainer/portainer-ce:latest
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-data:/data
    networks:
      - traefik-public
    restart: unless-stopped
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.portainer.rule=Host(`portainer.seu-dominio.com`)'
      - 'traefik.http.routers.portainer.entrypoints=websecure'
      - 'traefik.http.routers.portainer.tls.certresolver=letsencrypt'
      - 'traefik.http.services.portainer.loadbalancer.server.port=9000'

  # PostgreSQL - Banco de Dados
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=ticket_system
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-sua_senha_segura}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - traefik-public
      - internal
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-postgres}']
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis - Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-sua_senha_redis}
    volumes:
      - redis-data:/data
    networks:
      - internal
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3

  # Aplicação Next.js
  ticket-system:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-sua_senha_segura}@postgres:5432/ticket_system
      - REDIS_URL=redis://:${REDIS_PASSWORD:-sua_senha_redis}@redis:6379
      - NEXTAUTH_URL=https://tickets.seu-dominio.com
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - uploads:/app/uploads
      - logs:/app/logs
    networks:
      - traefik-public
      - internal
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.ticket-system.rule=Host(`tickets.seu-dominio.com`)'
      - 'traefik.http.routers.ticket-system.entrypoints=websecure'
      - 'traefik.http.routers.ticket-system.tls.certresolver=letsencrypt'
      - 'traefik.http.services.ticket-system.loadbalancer.server.port=3000'
      - 'traefik.http.middlewares.ticket-system-headers.headers.customrequestheaders.X-Forwarded-Proto=https'
      - 'traefik.http.middlewares.ticket-system-headers.headers.customrequestheaders.X-Forwarded-Host=tickets.seu-dominio.com'
      - 'traefik.http.routers.ticket-system.middlewares=ticket-system-headers'

  # Backup automático do PostgreSQL
  postgres-backup:
    image: prodrigestivill/postgres-backup-local
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=ticket_system
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-sua_senha_segura}
      - SCHEDULE=@daily
      - BACKUP_KEEP_DAYS=7
      - BACKUP_KEEP_WEEKS=4
      - BACKUP_KEEP_MONTHS=6
    volumes:
      - postgres-backups:/backups
    networks:
      - internal
    depends_on:
      - postgres
    restart: unless-stopped

  # Monitoramento com Prometheus
  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - traefik-public
    restart: unless-stopped
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.prometheus.rule=Host(`prometheus.seu-dominio.com`)'
      - 'traefik.http.routers.prometheus.entrypoints=websecure'
      - 'traefik.http.routers.prometheus.tls.certresolver=letsencrypt'
      - 'traefik.http.services.prometheus.loadbalancer.server.port=9090'

  # Grafana para visualização
  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - traefik-public
    restart: unless-stopped
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.grafana.rule=Host(`grafana.seu-dominio.com`)'
      - 'traefik.http.routers.grafana.entrypoints=websecure'
      - 'traefik.http.routers.grafana.tls.certresolver=letsencrypt'
      - 'traefik.http.services.grafana.loadbalancer.server.port=3000'

volumes:
  traefik-certificates:
  portainer-data:
  postgres-data:
  redis-data:
  uploads:
  logs:
  postgres-backups:
  prometheus-data:
  grafana-data:

networks:
  traefik-public:
    external: true
  internal:
    driver: overlay
    attachable: true
